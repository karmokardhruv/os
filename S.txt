SYNCHRONIZATION TECHNIQUES

Peterson’s Solution

#include <stdio.h>
#include <unistd.h>
#include <pthread.h>

int count = 5;
int flag[2] = {0, 0};
int turn = 0;

void* inc(void* n)
{
    flag[0] = 1;
    turn = 1;
    while (flag[1] == 1 && turn == 1);

    for (int i = 1; i <= 2000; i++)
    {
        count++;
    }

    flag[0] = 0;
    pthread_exit(n);
}

void* dec(void* n)
{
    flag[1] = 1;
    turn = 0;
    while (flag[0] == 1 && turn == 0);

    for (int i = 1; i <= 2000; i++)
    {
        count--;
    }

    flag[1] = 0;
    pthread_exit(n);
}

int main()
{
    pthread_t t1, t2;
    pthread_create(&t1, NULL, inc, NULL);
    pthread_create(&t2, NULL, dec, NULL);

    sleep(2);

    printf("Count: %d\n", count);

    return 0;
}


Spinlock

#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdbool.h>

int count = 5;
bool lock = false;

bool TestAndSet(bool *target) {
    bool rv = *target;
    *target = true;
    return rv;
}

void* inc(void* n)
{
    while (TestAndSet(&lock));

    for (int i = 1; i <= 2000; i++)
    {
        count++;
    }

    lock = false;
    pthread_exit(n);
}

void* dec(void* n)
{
    while (TestAndSet(&lock));

    for (int i = 1; i <= 2000; i++)
    {
        count--;
    }

    lock = false;
    pthread_exit(n);
}

int main()
{
    pthread_t t1, t2;
    pthread_create(&t1, NULL, inc, NULL);
    pthread_create(&t2, NULL, dec, NULL);

    sleep(2);

    printf("Count: %d\n", count);

    return 0;
}






SYNCHRONIZATION PROBLEMS

Producer And Consumer

#include <stdio.h>
#include <pthread.h>

#define BUFFER_SIZE 5

// Declaring Global Variables
int buffer[BUFFER_SIZE];
int fill = 0;
int use = 0;
int count = 0;

// Function to enter value in buffer
void put(int value)
{
    buffer[fill] = value;
    fill = (fill + 1) % BUFFER_SIZE;
    count++;
}

// Function to remove value from buffer
int get()
{
    int tmp = buffer[use];
    use = (use + 1) % BUFFER_SIZE;
    count--;
    return tmp;
}

// Creating conditional variables
pthread_mutex_t mutex;
int semaphore = 1;

// Creating the wait()
void sem_wait()
{
    pthread_mutex_lock(&mutex);
    while (semaphore <= 0)
    {
        pthread_mutex_unlock(&mutex);
        pthread_mutex_lock(&mutex);
    }
    semaphore--;
    pthread_mutex_unlock(&mutex);
}

// Creating the signal()
void sem_signal()
{
    pthread_mutex_lock(&mutex);
    semaphore++;
    pthread_mutex_unlock(&mutex);
}

// Writing the producer()
void* producer(void* arg)
{
    int i;
    for (i = 0; i < 10; i++)
    {
        sem_wait();
        put(i);
        sem_signal();
        printf("Produced: %d\n", i);
    }
    return NULL;
}

// Writing the consumer()
void* consumer(void* arg)
{
    int i;
    for (i = 0; i < 10; i++)
    {
        sem_wait();
        int value = get();
        sem_signal();
        printf("Consumed: %d\n", value);
    }
    return NULL;
}

// Driver Code
int main()
{
    pthread_t producer_thread, consumer_thread;
    pthread_mutex_init(&mutex, NULL);
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);
    pthread_mutex_destroy(&mutex);
    return 0;
}


Dining Philosophers

#include <stdio.h>
#include <unistd.h>
#include <pthread.h>

// Defining global terms
#define NUM_PHILOSOPHERS 5
#define LEFT (i + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS
#define RIGHT (i + 1) % NUM_PHILOSOPHERS

// Declaring conditional variables
int forks[NUM_PHILOSOPHERS];
pthread_mutex_t waiter;
int running = 1;

// Creating the wait()
void semaphore_wait(int* semaphore)
{
    pthread_mutex_lock(&waiter);
    while (*semaphore <= 0) {
        pthread_mutex_unlock(&waiter);
        pthread_mutex_lock(&waiter);
    }
    (*semaphore)--;
    pthread_mutex_unlock(&waiter);
}

// Creating the signal()
void semaphore_signal(int* semaphore)
{
    pthread_mutex_lock(&waiter);
    (*semaphore)++;
    pthread_mutex_unlock(&waiter);
}

// Main function for a philosopher
void* philosopher(void* arg)
{
    int i = *(int*)arg;
    while (running)
    {
        printf("Philosopher %d is thinking\n", i);
        sleep(1);
        semaphore_wait(&waiter);
        semaphore_wait(&forks[LEFT]);
        semaphore_wait(&forks[RIGHT]);
        printf("Philosopher %d is eating\n", i);
        sleep(1);
        semaphore_signal(&forks[LEFT]);
        semaphore_signal(&forks[RIGHT]);
        semaphore_signal(&waiter);
    }
    return NULL;
}

// Driver Code
int main()
{
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        forks[i] = 1;
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    sleep(5);

    running = 0;

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}






MULTI-THREADING

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// User defined function to sort the array in integers ascending order
void *int_sort(void *arg)
{
    printf("Executing Thread 1\n");

    int *arr = (int *)arg;
    int i, j, temp;

    for (i = 1; i < arr[0] + 1; i++)
    {
        for (j = i; j < arr[0]; j++)
        {
            if (arr[i] > arr[j])
            {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// User defined function to sort the array in alphabets ascending order
void *alpha_sort(void *arg)
{
    printf("Executing Thread 2\n");

    char *arr = (char *)arg;
    int i, j;
    char temp;

    for (i = 1; i < arr[0] + 1; i++)
    {
        for (j = i; j < arr[0]; j++)
        {
            if (arr[i] > arr[j])
            {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        printf("%c ", arr[i]);
    }
    printf("\n");
}

int main()
{
    pthread_t t1, t2;
    int m, n;

    printf("Enter Thread 1 ID: ");
    scanf("%lu", &t1);
    printf("Enter Thread 2 ID: ");
    scanf("%lu", &t2);

    printf("Enter number of integers: ");
    scanf("%d", &m);
    printf("Enter number of alphabets: ");
    scanf("%d", &n);

    int arr[m + 1];
    char arr2[n + 1];

    arr[0] = m;
    arr2[0] = n;

    for (int i = 1; i < m + 1; i++)
    {
        printf("Enter integer %d: ", i);
        scanf("%d", &arr[i]);
    }

    for (int i = 1; i < n + 1; i++)
    {
        printf("Enter alphabet %d: ", i);
        scanf(" %c", &arr2[i]);
    }

    printf("\n\nBefore sorting:\n");
    printf("Calling Thread 1 with ID: %lu\n", t1);
    pthread_create(&t1, NULL, int_sort, arr);
    printf("Calling Thread 2 with ID: %lu\n", t2);
    pthread_create(&t2, NULL, alpha_sort, arr2);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    // sleep(2);
    printf("Execution Completed\n");

    return 0;
}





BANKER’S ALGORITHM

#include <stdio.h>
#include <stdbool.h>
#include <string.h>

int main()
{
    // Initialization
    int n, m, i, j, k;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    int totalAvailable[m];
    int maximum[n][m];
    int allocated[n][m];
    int need[n][m];
    bool finished[n];
    char pid[n][21];

    // Taking input for all necessary parameters
    printf("Enter the total number of available instances for each resource: ");
    for (i = 0; i < m; i++)
    {
        scanf("%d", &totalAvailable[i]);
    }

    printf("Enter the Process IDs: ");
    for (int i = 0; i < n; i++)
    {
        scanf("%s", pid[i]);
    }

    printf("Enter the maximum number of instances for:\n");
    for (i = 0; i < n; i++)
    {
        printf("%s: ", pid[i]);
        for (j = 0; j < m; j++)
        {
            scanf("%d", &maximum[i][j]);
        }
    }

    printf("Enter the number of allocated instances for:\n");
    for (i = 0; i < n; i++)
    {
        printf("%s: ", pid[i]);
        for (j = 0; j < m; j++)
        {
            scanf("%d", &allocated[i][j]);
            need[i][j] = maximum[i][j] - allocated[i][j];
        }
        finished[i] = false;
    }

    // Calculate available resources by subtracting allocated resources from total available resources
    int available[m];
    for (j = 0; j < m; j++)
    {
        available[j] = totalAvailable[j];
        for (i = 0; i < n; i++)
        {
            available[j] -= allocated[i][j];
        }
    }

    // Checking for safety sequence
    int work[m];
    bool canAllocate;
    int safetySequence[n];
    int sequenceIndex = 0;
    for (i = 0; i < m; i++)
    {
        work[i] = available[i];
    }

    int count = 0;
    while (count < n)
    {
        bool found = false;
        for (i = 0; i < n; i++)
        {
            if (!finished[i])
            {
                canAllocate = true;
                for (j = 0; j < m; j++)
                {
                    if (need[i][j] > work[j])
                    {
                        canAllocate = false;
                        break;
                    }
                }
                if (canAllocate)
                {
                    for (j = 0; j < m; j++)
                    {
                        work[j] += allocated[i][j];
                    }
                    safetySequence[sequenceIndex++] = i;
                    finished[i] = true;
                    count++;
                    found = true;
                }
            }
        }
        // Deadlock Detection Condition
        if (!found)
        {
            break;
        }
    }

    // Printing output
    if (count == n)
    {
        printf("The system is in a safe state.\n");
        printf("Safety sequence: ");
        for (i = 0; i < n; i++)
        {
            printf("%s ", pid[safetySequence[i]]);
        }
        printf("\n");
    }
    else
    {
        printf("The system is in an unsafe state. Deadlock detected.\n");
    }

    return 0;
}
